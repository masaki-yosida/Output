putsメソッド
putsメソッドは引数であるオブジェクトを標準出力として出力します。この時、引数であるオブジェクトは文字列に変換されます。
使い方
puts   ("xxx")　　　　　　　　　　　　puts  "xxx"

# でコメント

代入
# 変数nameに、文字列「にんじゃわんこ」を代入してください
name = "にんじゃわんこ"
# 変数nameを出力してください
puts name

each メソッド
each メソッドは配列や範囲オブジェクトなどで用意されているメソッドであり、オブジェクトに含まれている要素を順に取り出すことができます
オブジェクト.each{|変数|
  実行する処理1
  実行する処理2
}
または

オブジェクト.each do |変数|
  実行する処理1
  実行する処理2
end
例
languages = ["日本語", "英語", "スペイン語"]
# each文を用いて、要素ごとに「○○を話せます」と出力してください
languages.each do |language|
  puts "#{language}を話せます"
end

Hash(ハッシュ)
配列は一つの要素にオブジェクトが一つ入っていたのに対して、ハッシュはオブジェクトがキーとバリューの二つ入っているのが特長です
例
fruits = {"apple"=> "100円", "orange"=> "80円", "melon"=> "500"}
puts fruits

ハッシュの書き方のまとめ
# キーが文字列の書き方
fruits = {"apple"=> "100円", "orange"=> "80円", "melon"=> "500"}
# キーがシンボルの書き方
fruits = {:apple=> "100円", :orange=> "80円", :melon=> "500"}
# キーがシンボルの書き方(省略)
fruits = {apple："100円", orange: "80円", :melon: "500"}

シンボル
シンボルを使うと文字列で普通に定義した時と比べて、少しだけ処理を高速化することができる.数値として扱われるので、文字列と比べればメモリサイズが軽くなります
可読性が上がる
hash1 = {:Ruby=>"Rails",:Python=>"Django"}

配列の中のハッシュ
配列[インデックス番号]でハッシュを用いることができるので、そのハッシュを代入した変数をつかって、変数[キー]とすることでハッシュの要素の値を用いることができます
exams = [
  {subject: "Math", score: 80},
  {subject: "Science", score: 55}
]
# each文を用いて、要素ごとに「○○の結果は△△点です」と出力してください
exams.each do|exam|
  puts "#{exam[:subject]}の結果は#{exam[:score]}点です"
end

復習
characters = [
  {name: "にんじゃわんこ", age: 14},
  {name: "ひつじ仙人"},
  {name: "ベイビーわんこ", age: 5},
  {name: "とりずきん"}
]
characters.each do |character|
  puts "--------------------"
  puts "名前は#{character[:name]}です"
  
  # キー:ageの値に応じて年齢の情報を出力してください
  if character[:age]
    puts "年齢は#{character[:age]}歳です"
  else
    puts "年齢は秘密です"
   end
end

メソッド
メソッドとは、複数の処理を1つにまとめたもの
def メソッド名」と「end」の間に、まとめたい処理を書くことでメソッドをつくることができます
例
def introduce
  puts "こんにちは"
  puts "私はにんじゃわんこです"
  # 出力を追加してください
  puts "14歳です"
end
puts "-----自己紹介-----"
# introduceメソッドを呼び出してください
introduce

引数
引数（ひきすう）とはメソッドに与える追加情報のようなものです。メソッドを呼び出すときに一緒に引数を渡すことで、メソッドの中でその値を利用すること
引数を渡してメソッドを呼び出すには、「メソッド名(値)」とします。
メソッドは、指定した値を受け取り、その値は引数に代入されます
def introduce(name)
  puts "こんにちは"
  puts "私は#{name}です"
end
# 引数を渡してメソッドを呼び出してください
puts introduce("名前")

メソッドの中でreturnを使うと、呼び出し元で値を受け取れるようになります。
def discount(price)
# 「price / 2」を戻り値として返してください
	return price / 2
end
puts "テレビがセール中です！"
# discountメソッドを呼び出し、その戻り値を変数half_priceに代入してください
half_price =discount(15000)
# 変数half_priceを用いて、「特別価格で〇〇円です」となるように出力してください
puts "特別価格で#{half_price}円です"


# shipping_free?メソッドを定義してください
def shipping_free?(price)
  return price >= 5000
end
# if文の条件式でshipping_free?メソッドを呼び出してください
if shipping_free?(3000)
	puts "5000円以上のお買い上げなので送料はいただきません"
else
	puts "追加で送料をいただきます"
end

returnは、戻り値を返すだけでなく、メソッドの処理を終了させる性質も持っています。
よって、returnの後にあるメソッドの処理は実行されませんので注意しましょう。

attr_accessor
クラスのデータを定義する方法の1つに「attr_accessor シンボル」を使う方法があります
例
class Menu
  # nameとpriceというインスタンス変数を用意してください
  attr_accessor :name
  attr_accessor :price
end

インスタンスの生成
クラス（設計図）を元に、新しくインスタンスを生成するには、「クラス名.new」とします。
また、「変数名 = クラス名.new」とすることで、生成したインスタンスを変数に代入することができます。

インスタンス変数に値を代入
インスタンス.変数名 = 値

インスタンスメソッドの中では、特殊な変数「self」を用いて「self.変数名」とすることで、インスタンス変数を扱うことができるようになります。
インスタンスメソッドでは、変数「self」に、呼び出したインスタンス自身が代入されています。
例
class Menu
  attr_accessor :name
  attr_accessor :price
  def info
    # 「#{}」の中身を埋めてください
    return "#{self.name} #{self.price}円"
  end
end
menu1 = Menu.new
menu1.name = "ピザ"
menu1.price = 800
puts menu1.info

initializeメソッド
initializeメソッドは、「クラス名.new」でインスタンスを生成した直後に自動で呼び出されます
initializeメソッドの中で、インスタンス変数に値を代入してみましょう。
インスタンスメソッドの中では、「self.変数名」でインスタンス変数を扱うことができるので、「self.変数名 = 値」でインスタンス変数に値を代入できます。

initializeメソッドの引数
initializeメソッドは通常のインスタンスメソッドと同じように、引数を渡すこともできます。
その際、「クラス.new」に対して引数を渡すことで、initializeメソッドにその値を渡すことができます。

require
Menuクラスの定義をmenu.rbに移動させたら、menu.rbのコードをindex.rbでも使えるようにしましょう。
index.rbの一番上の行で、「require "./menu"」とすることで、menu.rbのコードを読み込めるようになります。
例
require "./menu"

menu1 = Menu.new(name: "ピザ", price: 800)
menu2 = Menu.new(name: "すし", price: 1000)
menu3 = Menu.new(name: "コーラ", price: 300)
menu4 = Menu.new(name: "お茶", price: 200)

# 変数menusを定義して配列を代入してください
menus =[menu1, menu2, menu3, menu4]

# menusに対して繰り返し処理を実行してください
menus.each do |menu|
  puts menu.info
end

gets.chomp
力を受け付けるには「gets.chomp」を使います。このコードが実行されると、コンソールが入力待機状態になります。
「変数 = gets.chomp」とすることで、エンターキーを押されるまでに入力された値を変数に代入することができます。

gets.chomp.to_i
「gets.chomp」で入力された値を受け取ることができましたが、実はこれは文字列になるため、「3」と入力しても文字列の"3"になってしまいます。
数値の計算などに用いる場合は、これを数値に変換する必要があります。
例
puts "名前を入力してください"

# 入力を受け取って変数nameに代入してください
name = gets.chomp

# 「○○さん、いらっしゃいませ」となるように出力してください
puts "#{name}さん、いらっしゃいませ"

puts "1つ100円のお菓子があります"
puts "いくつ買いますか?"

# 入力を数値として受け取って変数countに代入してください
count = gets.chomp.to_i

# 変数total_priceに、100とcountを掛けた値を代入してください
 total_price = count * 100

# 「お会計は○○円です」となるように出力してください

puts "お会計は#{total_price}円です"


オーバーライド
親クラスにあるメソッドと同じ名前のメソッドを子クラスで定義すると、メソッドを上書きすることができます。これをメソッドの「オーバーライド」と呼びます。
オーバーライドをすると、子クラスのインスタンスは親クラスのメソッドではなく、子クラスで定義したメソッドを呼び出すようになります。

super
オーバーライドしたメソッドの中で「super」とすることで、親クラスの同名のメソッドを呼び出すことができます。
あくまでメソッドを呼び出しているので、親クラスのメソッドの定義に合わせて、superに対して引数を渡す必要があります。
 def initialize(name:, price:, calorie:)
    # superを使って書き換えてください
    self.name = name
    self.price = price
    self.calorie = calorie
  end
　　　　　　　　　　　　　　　　　　　　　↓
def initialize(name:, price:, calorie:)
    # superを使って書き換えてください
    super(name: name,price: price)
    self.calorie = calorie
  end

Dateクラス
日付を扱うためには、Dateクラスというものを用います。DateクラスとはRubyがすでに用意しているクラス
# requireを用いて、Dateクラスを読み込んでください
require "date"
# 変数birthdayに、Dateクラスのインスタンスを代入してください
birthday = Date.new(1995 ,6,30)
# 変数birthdayをputsしてください
puts birthday¥
# 変数birthdayにsunday?メソッドを用いた結果をputsしてください
puts birthday.sunday?
