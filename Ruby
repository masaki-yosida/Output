putsメソッド
putsメソッドは引数であるオブジェクトを標準出力として出力します。この時、引数であるオブジェクトは文字列に変換されます。
使い方
puts   ("xxx")　　　　　　　　　　　　puts  "xxx"

# でコメント

代入
# 変数nameに、文字列「にんじゃわんこ」を代入してください
name = "にんじゃわんこ"
# 変数nameを出力してください
puts name

each メソッド
each メソッドは配列や範囲オブジェクトなどで用意されているメソッドであり、オブジェクトに含まれている要素を順に取り出すことができます
オブジェクト.each{|変数|
  実行する処理1
  実行する処理2
}
または

オブジェクト.each do |変数|
  実行する処理1
  実行する処理2
end
例
languages = ["日本語", "英語", "スペイン語"]
# each文を用いて、要素ごとに「○○を話せます」と出力してください
languages.each do |language|
  puts "#{language}を話せます"
end

Hash(ハッシュ)
配列は一つの要素にオブジェクトが一つ入っていたのに対して、ハッシュはオブジェクトがキーとバリューの二つ入っているのが特長です
例
fruits = {"apple"=> "100円", "orange"=> "80円", "melon"=> "500"}
puts fruits

ハッシュの書き方のまとめ
# キーが文字列の書き方
fruits = {"apple"=> "100円", "orange"=> "80円", "melon"=> "500"}
# キーがシンボルの書き方
fruits = {:apple=> "100円", :orange=> "80円", :melon=> "500"}
# キーがシンボルの書き方(省略)
fruits = {apple："100円", orange: "80円", :melon: "500"}

シンボル
シンボルを使うと文字列で普通に定義した時と比べて、少しだけ処理を高速化することができる.数値として扱われるので、文字列と比べればメモリサイズが軽くなります
可読性が上がる
hash1 = {:Ruby=>"Rails",:Python=>"Django"}

配列の中のハッシュ
配列[インデックス番号]でハッシュを用いることができるので、そのハッシュを代入した変数をつかって、変数[キー]とすることでハッシュの要素の値を用いることができます
exams = [
  {subject: "Math", score: 80},
  {subject: "Science", score: 55}
]
# each文を用いて、要素ごとに「○○の結果は△△点です」と出力してください
exams.each do|exam|
  puts "#{exam[:subject]}の結果は#{exam[:score]}点です"
end

復習
characters = [
  {name: "にんじゃわんこ", age: 14},
  {name: "ひつじ仙人"},
  {name: "ベイビーわんこ", age: 5},
  {name: "とりずきん"}
]
characters.each do |character|
  puts "--------------------"
  puts "名前は#{character[:name]}です"
  
  # キー:ageの値に応じて年齢の情報を出力してください
  if character[:age]
    puts "年齢は#{character[:age]}歳です"
  else
    puts "年齢は秘密です"
   end
end

メソッド
メソッドとは、複数の処理を1つにまとめたもの
def メソッド名」と「end」の間に、まとめたい処理を書くことでメソッドをつくることができます
例
def introduce
  puts "こんにちは"
  puts "私はにんじゃわんこです"
  # 出力を追加してください
  puts "14歳です"
end
puts "-----自己紹介-----"
# introduceメソッドを呼び出してください
introduce

引数
引数（ひきすう）とはメソッドに与える追加情報のようなものです。メソッドを呼び出すときに一緒に引数を渡すことで、メソッドの中でその値を利用すること
引数を渡してメソッドを呼び出すには、「メソッド名(値)」とします。
メソッドは、指定した値を受け取り、その値は引数に代入されます
def introduce(name)
  puts "こんにちは"
  puts "私は#{name}です"
end
# 引数を渡してメソッドを呼び出してください
puts introduce("名前")

メソッドの中でreturnを使うと、呼び出し元で値を受け取れるようになります。
def discount(price)
# 「price / 2」を戻り値として返してください
	return price / 2
end
puts "テレビがセール中です！"
# discountメソッドを呼び出し、その戻り値を変数half_priceに代入してください
half_price =discount(15000)
# 変数half_priceを用いて、「特別価格で〇〇円です」となるように出力してください
puts "特別価格で#{half_price}円です"


# shipping_free?メソッドを定義してください
def shipping_free?(price)
  return price >= 5000
end
# if文の条件式でshipping_free?メソッドを呼び出してください
if shipping_free?(3000)
	puts "5000円以上のお買い上げなので送料はいただきません"
else
	puts "追加で送料をいただきます"
end

returnは、戻り値を返すだけでなく、メソッドの処理を終了させる性質も持っています。
よって、returnの後にあるメソッドの処理は実行されませんので注意しましょう。

attr_accessor
クラスのデータを定義する方法の1つに「attr_accessor シンボル」を使う方法があります
例
class Menu
  # nameとpriceというインスタンス変数を用意してください
  attr_accessor :name
  attr_accessor :price
end

インスタンスの生成
クラス（設計図）を元に、新しくインスタンスを生成するには、「クラス名.new」とします。
また、「変数名 = クラス名.new」とすることで、生成したインスタンスを変数に代入することができます。
