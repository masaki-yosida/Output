重要
縦の列のことを「カラム」、横の行のことを「レコード」

データベース
データベースとは、テキストや数値などのデータを保存するためのツールです。
例えばTwitterのようなSNSは「投稿データ」

データベースの仕組み
データベースは、表でデータを管理しています。
表のことを「テーブル」と呼びます。縦の列のことを「カラム」、横の行のことを「レコード」と呼びます。データベースでは、
必要に応じて複数のテーブルを作成することが可能です。

クエリ
データベースに送る命令（クエリ）
データベースからデータを取得するためには、「データを取得してください」といったようにデータベースに送る命令（クエリ）が必要なのじゃ。
SQL(エスキューエル)とはクエリを書くための言語

SELECT
データベースから、データを取得するためには「SELECT」を用います。このSELECTを用いて、「どのカラムのデータを取得するか」を選びます。

FROM
「FROM」を用いて、SELECTで選んだカラムが「どのテーブルのカラムか」を指定する必要があります。

使い方
-- purchasesテーブルから、priceカラムのデータを取得してください
select price
from purchases;

-- purchasesテーブルから、全てのカラムのデータを取得してください
select *
from purchases;
*で全てを習得できる

categoryカラムが「食費」であるデータを取得し方
where category = "食費" ; 

データ型
テキストデータや数値データ、さらには日付データといったように「データの種類」を示すもの

priceカラムが「1000」のデータを取得
where price =1000;

purchased_atカラムが「2017-07-01」のデータを取得
where purchased_at = "2017-07-01" ;

priceカラムが「1000以上」のデータを取得
where price >= 1000 ;

purchased_atカラムが「2017-08-01以前」のデータを取得
where purchased_at <= "2017-08-01";

LIKE演算子
「ある文字を含むデータ」を取得したい場合は、「〜のような」という意味を持つ、「LIKE演算子」を用います。
nameカラムが「プリン」を含むデータを取得
where name like "%プリン%" ;

前方一致
ワイルドカードを文字列の前後どちらかにのみ置くことも可能
「〇〇%」とした場合、「〇〇」以降はどんな文字列にも一致しますので、「〇〇」で始まる文字列を検索することができます。このような検索を「前方一致」と呼びます。
nameカラムが「プリン」で始まるデータを取得
where name like "プリン%" ;
後方一致
%〇〇」とした場合、「〇〇」より前はどんな文字列にも一致しますので「〇〇」で終わる文字列を検索することができます。このような検索を「後方一致」と呼びます。
nameカラムが「プリン」で終わるデータを取得
where name like "%プリン" ;

NOT演算子
「〇〇を含まないデータ」や「〇〇に一致しないデータ」のような条件でデータを取得したい場合は「否定」を意味する「NOT演算子」を用います
character_nameカラムが「にんじゃわんこ」でないデータを取得
where not character_name = "にんじゃわんこ";
nameカラムが「プリン」を含まないデータを取得
where not name like "%プリン%";

NULL=何もない
priceカラムがNULLであるデータを取得
where price is null ;
priceカラムがNULLでないデータを取得
where price is not null ;

categoryカラムが「食費」かつcharacter_nameカラムが「ひつじ仙人」であるデータを取得
where category = "食費"
and character_name = "ひつじ仙人";
categoryカラムが「食費」またはcharacter_nameカラムが「にんじゃわんこ」であるデータを取得
where category = "食費"
or character_name = "にんじゃわんこ";

ORDER BY
データを並び替えるためには、「〜順に並べる」という意味の「ORDER BY」を用います
「ORDER BY」は「WHERE」と併用することが可能


昇順と降順
昇順」は「小さい数から大きい数へ向かう順序」、「降順」は「大きい数から小さい数へ向かう順序」です。SQLでは「昇順」は「ASC」、「降順」は「DESC」と指定

priceカラムを基準に降順に並び替えたデータを取得
order by price desc;
priceカラムを基準に昇順に並び替えたデータを取得
order by price asc ;

LIMIT
「最大で何件取得するか」を指定するためには、「制限する」という意味の「LIMIT」
「LIMIT」も「ORDER BY」と同様に「WHERE」と併用することが可能

取得結果が「最大5件」となるようにデータを取得
limit 5;
取得結果が「最大10件」となるようにデータを取得
limit 10;

DISTINCT
検索結果から重複するデータを除くことが可能
重複するデータを除いたcharacter_nameカラムのデータを取得
SELECT DISTINCT(character_name)

四則演算
消費税を含んだpriceカラムのデータを取得
SELECT name, price, price *1.08

SUM関数
SQLで数値の合計を計算する場合は、SUMを用います
priceカラムのデータの合計を取得
SELECT sum(price)
「にんじゃわんこ」であるpriceカラムのデータの合計を取得
SELECT sum(price)
FROM purchases
WHERE character_name ="にんじゃわんこ";

AVG関数
SQLで数値の平均を計算する場合は、AVGを用います
 priceカラムの平均を取得
SELECT avg(price)
character_nameが「にんじゃわんこ」であるpriceカラムのデータの平均を取得
SELECT avg(price)
FROM purchases
WHERE character_name = "にんじゃわんこ" ;

COUNT関数
COUNT関数は、指定したカラムのデータの合計数を計算してくれる関数
COUNT関数でカラム名を指定した場合、nullになっているデータの数は計算されない
nullの数も含めてデータの数を計算したい場合は、COUNT関数で * (全てのカラム)を指定します。
nameカラムのデータの数を取得
SELECT count(name)
テーブルのデータの数を取得
SELECT count(*)
「にんじゃわんこ」であるデータの数を取得
SELECT count(*)
FROM purchases
WHERE character_name= "にんじゃわんこ" ;

MAX・MIN関数
SQLでMAXという関数を用いると、指定したカラムのデータの中から最大のデータを取得することができます。同じく、MINと言う関数を用いることで、最小のデータを取得する
もっとも大きいpriceカラムの値を取得
max(price)
もっとも小さいpriceカラムの値を取得
min(price)
「にんじゃわんこ」であるレコードの中で、もっとも大きいpriceカラムの値を取得
SELECT max(price)
FROM purchases
WHERE character_name ="にんじゃわんこ" ;

GROUP BY
GROUP BYを用いると、データをグループ化することができます
GROUP BYの注意点
GROUP BYを用いる場合、SELECTで使えるのは、GROUP BYに指定しているカラム名と、集計関数のみ
purchased_atごとの合計金額を取得
SELECT sum(price),purchased_at
FROM purchases
group by purchased_at ;
purchased_atごとのお金を使った数を取得
SELECT count(price),purchased_at
FROM purchases
group by purchased_at;

purchased_atとcharacter_nameごとの合計金額を取得
SELECT sum(price),purchased_at,character_name
FROM purchases
GROUP BY purchased_at,character_name;
purchased_atとcharacter_nameごとにお金を使った回数
SELECT count(*),purchased_at,character_name
FROM purchases
GROUP BY purchased_at,character_name ;

WHEREとGROUP BY
GROUP BYはWHEREとも併用することができ、その場合はWHEREの後に書きます。
検索      where
グループ化 group by
関数　　　　　　　　　　 count sum avg max min 
WHEREに条件を付け足してcharacter_nameがにんじゃわんこであるデータを取得し、グループ化
SELECT sum(price) ,purchased_at
FROM purchases
WHERE character_name = "にんじゃわんこ"
GROUP BY purchased_at;
-- WHEREに条件を付け足してcategoryが食費であるデータをpurchased_atとcharacter_nameでグループ化
SELECT sum(price) ,purchased_at ,character_name
FROM purchases
WHERE category ="食費"
GROUP BY purchased_at,character_name;

HAVING
GROUP BYでグループ化したデータを更に絞り込みたい場合には、HAVINGを用います
日付ごとの合計金額のうち、2000円を超えるデータのみを取得
SELECT sum(price),purchased_at
FROM purchases
GROUP BY purchased_at
having sum(price) >2000 ;
日付とキャラクターごとの合計金額のうち、3000円を超えるデータのみを取得
SELECT sum(price),purchased_at,character_name
FROM purchases
GROUP BY purchased_at,character_name
having sum(price) > 3000;

サブクエリ
SQLでは、クエリの中に他のクエリを入れることができます。この他のクエリをサブクエリと言います。2つ以上のクエリを1つにまとめることができる
ウィルの得点数より高いレコードのデータを取得
SELECT name
FROM players
WHERE goals > (
  SELECT goals
  FROM players
  WHERE name = "ウィル"
);
平均得点数より高いレコードからデータを取得
SELECT name,goals
FROM players
where goals>(
select avg(goals)
from players
);

ASの使い方
ASを使うことでカラム名などに別名を定義することができます。「カラム名 AS "名前"」で、カラム名に定義する名前を指定
--ASを使って、取得したカラム名を"身長180cm以上の選手"としてください
SELECT name as "身長180cm以上の選手"
FROM players
where height >= 180 ; 
--ASを使って、取得したカラム名を"チームの合計得点"としてください
SELECT sum(goals) as "チームの合計得点"
FROM players ;

日本より上位である国のデータを取得
SELECT *
FROM countries
WHERE rank < (
  select rank
  FROM countries
  WHERE name = "日本"
);

JOIN
JOINは複数のテーブルを1つに結合したいときに使います。ONで条件を指定して、テーブルAにテーブルBを結合します。結合したテーブルは1つのテーブルとしてデータを取得
SELECT *
FROM テーブルA
join　テーブルB
on　結合条件（「ON テーブル名.カラム名 = テーブル名.カラム名）
結合条件
結合条件は、「ON テーブル名.カラム名 = テーブル名.カラム名」で指定します

JOINを使い、playersテーブルにcountriesテーブル を結合してデータを取得してください。ONを使い、playersテーブルのcountry_idとcountriesテーブルのidを紐づけ
SELECT *
FROM players
JOIN countries
ON players.country_id = countries.id ;

JOINを使い、playersテーブルにcountriesテーブルを結合して、下記のデータを取得してください。
①playersテーブルのnameカラム②countriesテーブルのnameカラム
SELECT players.name,countries.name
FROM players
join countries
on players.country_id = countries.id ;

JOINを使い、playersテーブルにcountriesテーブル を結合して、下記のデータを取得してください。
①countriesテーブルのnameカラム②goalsカラムの合計
ただし、 GROUP BYを使って、countries.nameごとにグループ化してください。
SELECT countries.name , sum(goals)
FROM players
join  countries
on players.country_id = countries.id
group by countries.name;

JOINを使った結合は、FROMで指定したテーブルを基準に実行されます。ただし外部キーがNULLのレコードは、実行結果に表示されません。

LEFT JOIN
LEFT JOINを使うことで、FROMで指定したテーブルのレコードを全て取得します。外部キーがNULLのレコードもNULLのまま実行結果に表示されます。
LEFT JOINを使い、playersテーブルにteamsテーブルを結合して、データを取得
SELECT *
FROM players
LEFT JOIN teams
on players.previous_team_id = teams.id;

